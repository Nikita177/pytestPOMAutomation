<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1656804225909" stop="1656804231920">
  <name>testCases</name>
  <labels/>
  <test-cases>
    <test-case start="1656804225909" status="broken" stop="1656804231920">
      <name>Test_Login_Page.Test_001_Login.test_login</name>
      <failure>
        <message>InvalidSessionIdException: Message: invalid session id
Stacktrace:
Backtrace:
	Ordinal0 [0x007C6463+2188387]
	Ordinal0 [0x0075E461+1762401]
	Ordinal0 [0x00673C40+801856]
	Ordinal0 [0x006968BD+944317]
	Ordinal0 [0x00697AD6+948950]
	GetHandleVerifier [0x00A671F2+2712546]
	GetHandleVerifier [0x00A5886D+2652765]
	GetHandleVerifier [0x0085002A+520730]
	GetHandleVerifier [0x0084EE06+516086]
	Ordinal0 [0x0076468B+1787531]
	Ordinal0 [0x00768E88+1805960]
	Ordinal0 [0x00768F75+1806197]
	Ordinal0 [0x00771DF1+1842673]
	BaseThreadInitThunk [0x7524FA29+25]
	RtlGetAppContainerNamedObjectPath [0x771A7A9E+286]
	RtlGetAppContainerNamedObjectPath [0x771A7A6E+238]
</message>
        <stack-trace>request = &lt;SubRequest 'setup' for &lt;Function test_login&gt;&gt;, browser = 'chrome'

    @pytest.fixture()
    def setup(request,browser):
        print("============Setup====================")
        if browser=="chrome":
            '''capabilities = DesiredCapabilities.CHROME
            capabilities['loggingPrefs'] = {'browser': 'ALL'}
            '''
            opts = ChromeOptions()
            capabilities = webdriver.DesiredCapabilities.CHROME
            capabilities['goog:loggingPrefs'] = {'browser': 'ALL'}
            driver = webdriver.Chrome(ChromeDriverManager().install(),desired_capabilities=capabilities,options=opts)
        if browser == "firefox":
            driver = webdriver.Firefox(executable_path=GeckoDriverManager().install())
            driver.implicitly_wait(10)
    
        request.cls.driver=driver
        yield driver
        if browser == "chrome":
            print("=============Error console=============")
            #print('browser = ', driver.get_log('browser'))
          #  print('driver = ', driver.get_log('driver'))
&gt;           consolemsgs = get_browser_log_entries(request.cls.driver)

testCases\conftest.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
utilities\browserLogs.py:7: in get_browser_log_entries
    slurped_logs = driver.get_log('browser')
..\pythonProject\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:1561: in get_log
    return self.execute(Command.GET_LOG, {'type': log_type})['value']
..\pythonProject\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:430: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F8E04B9310&gt;
response = {'status': 404, 'value': '{"value":{"error":"invalid session id","message":"invalid session id","stacktrace":"Backtrac...\n\\tRtlGetAppContainerNamedObjectPath [0x771A7A9E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x771A7A6E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x007C6463+2188387]
E       	Ordinal0 [0x0075E461+1762401]
E       	Ordinal0 [0x00673C40+801856]
E       	Ordinal0 [0x006968BD+944317]
E       	Ordinal0 [0x00697AD6+948950]
E       	GetHandleVerifier [0x00A671F2+2712546]
E       	GetHandleVerifier [0x00A5886D+2652765]
E       	GetHandleVerifier [0x0085002A+520730]
E       	GetHandleVerifier [0x0084EE06+516086]
E       	Ordinal0 [0x0076468B+1787531]
E       	Ordinal0 [0x00768E88+1805960]
E       	Ordinal0 [0x00768F75+1806197]
E       	Ordinal0 [0x00771DF1+1842673]
E       	BaseThreadInitThunk [0x7524FA29+25]
E       	RtlGetAppContainerNamedObjectPath [0x771A7A9E+286]
E       	RtlGetAppContainerNamedObjectPath [0x771A7A6E+238]

..\pythonProject\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: InvalidSessionIdException</stack-trace>
      </failure>
      <attachments>
        <attachment source="a27e9121-caf6-48ee-883f-7f3e0f24dec2-attachment.txt" title="Captured log setup" type="text/plain"/>
        <attachment source="dc95a33b-c682-4c66-b4ea-3c4ad16f34cb-attachment.txt" title="Captured log call" type="text/plain"/>
        <attachment source="997281d4-c3cc-49d3-8567-479c9bd53a3a-attachment.txt" title="Captured log setup" type="text/plain"/>
        <attachment source="648aa995-129a-48bc-aef8-4b6d7c27e28c-attachment.txt" title="Captured log call" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="24580-MainThread"/>
        <label name="host" value="LAPTOP-KKOEBFM8"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
  </test-cases>
</ns0:test-suite>
